-- =====================================================
-- Add Puff Daddy Item to Database
-- =====================================================
-- This SQL script adds the new "Puff Daddy" item to your Supabase database.
-- Run this in your Supabase SQL Editor.
--
-- Item Details:
-- - ID: puff-daddy
-- - Name: Puff Daddy
-- - Description: This is one puffy mfer..
-- - Reward Rate: 10000 BUD/min
-- - Price: 57,600,000 BUD
-- =====================================================

-- NOTE: Your game doesn't have an 'items' table in the database.
-- Items are defined client-side in itemsConfig.js and shopSystem.js.
-- 
-- The server-side validation happens in the purchase_item RPC function,
-- which validates purchases based on the price passed from the client.
--
-- NO DATABASE CHANGES NEEDED! 
-- 
-- The item has already been added to:
-- ✅ js/itemsConfig.js (item metadata)
-- ✅ js/shopSystem.js (shop listing with price: 57600000)
--
-- The server will automatically:
-- 1. Accept purchase_item RPC calls with item_id='puff-daddy'
-- 2. Store in 'inventory' table (player_id, item_id='puff-daddy', count)
-- 3. Store in 'placed_plants' table when placed (item_id='puff-daddy', grid_row, grid_col, rotation)
-- 4. Calculate BUD generation (if you have generation rate stored in DB)
--
-- =====================================================
-- Optional: If you WANT to track items in database
-- =====================================================
-- If you decide to create an 'items' table for validation:

-- CREATE TABLE IF NOT EXISTS items (
--     id TEXT PRIMARY KEY,
--     name TEXT NOT NULL,
--     description TEXT,
--     reward_rate INTEGER NOT NULL, -- BUD per minute
--     price BIGINT NOT NULL,
--     max_purchases INTEGER, -- NULL = unlimited
--     created_at TIMESTAMPTZ DEFAULT NOW()
-- );

-- Then insert Puff Daddy:

-- INSERT INTO items (id, name, description, reward_rate, price, max_purchases)
-- VALUES (
--     'puff-daddy',
--     'Puff Daddy',
--     'This is one puffy mfer..',
--     10000, -- 10000 BUD/min
--     57600000, -- 57.6 million BUD
--     NULL -- Unlimited purchases
-- );

-- And update the purchase_item RPC to validate against this table:

-- CREATE OR REPLACE FUNCTION purchase_item(
--     p_player_id UUID,
--     p_item_id TEXT,
--     p_item_price BIGINT
-- )
-- RETURNS JSON AS $$
-- DECLARE
--     v_player_bud BIGINT;
--     v_actual_price BIGINT;
-- BEGIN
--     -- Get player's current BUD
--     SELECT total_bud INTO v_player_bud
--     FROM players
--     WHERE id = p_player_id;
--     
--     -- Get actual price from items table (prevents client-side price manipulation)
--     SELECT price INTO v_actual_price
--     FROM items
--     WHERE id = p_item_id;
--     
--     -- Validate price matches
--     IF v_actual_price != p_item_price THEN
--         RETURN json_build_object(
--             'success', false,
--             'message', 'Price mismatch - possible tampering detected'
--         );
--     END IF;
--     
--     -- Check if player has enough BUD
--     IF v_player_bud < v_actual_price THEN
--         RETURN json_build_object(
--             'success', false,
--             'message', 'Not enough BUD'
--         );
--     END IF;
--     
--     -- Deduct BUD
--     UPDATE players
--     SET total_bud = total_bud - v_actual_price
--     WHERE id = p_player_id;
--     
--     -- Add to inventory (INSERT or UPDATE)
--     INSERT INTO inventory (player_id, item_id, count)
--     VALUES (p_player_id, p_item_id, 1)
--     ON CONFLICT (player_id, item_id)
--     DO UPDATE SET count = inventory.count + 1;
--     
--     RETURN json_build_object(
--         'success', true,
--         'message', 'Purchase successful'
--     );
-- END;
-- $$ LANGUAGE plpgsql SECURITY DEFINER;

-- =====================================================
-- CURRENT STATUS: ✅ Ready to Deploy
-- =====================================================
-- Your game is ready! No SQL changes needed.
-- Just upload the updated files:
-- 1. js/itemsConfig.js (updated ✅)
-- 2. js/shopSystem.js (updated ✅)
-- 3. css/style.css (shop scrollable ✅)
-- 4. assets/sprites/puff-daddy.png (user needs to upload manually)
--
-- Then push to GitHub and Vercel will auto-deploy!
-- =====================================================
